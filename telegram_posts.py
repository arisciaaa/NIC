import json
import asyncio
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
import my_config
import os

session_file = f"{my_config.number}.session"
if os.path.exists(session_file):
    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {session_file}")
else:
    print("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = my_config.api_id
api_hash = my_config.api_hash
number = my_config.number
channel_username = "shot_shot"
output_file = "shot_posts.json"


async def fetch_posts():
    print("üîÑ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
    async with TelegramClient(number, api_id, api_hash) as client:
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É @{channel_username}...")
        entity = await client.get_entity(channel_username)

        all_messages = []
        offset_id = 0
        limit = 100
        total_messages = 0
        max_posts = 5000
        offset_date = None

        print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        while total_messages < max_posts:

            try:
                history = await client(GetHistoryRequest(
                    peer=entity,
                    offset_id=offset_id,
                    offset_date=offset_date,
                    add_offset=0,
                    limit=limit,
                    max_id=0,
                    min_id=0,
                    hash=0
                ))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                break

            if not history.messages:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                break

            messages = history.messages
            print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")

            for msg in messages:
                if not msg.message and not msg.media:
                    continue

                # –†–µ–∞–∫—Ü–∏–∏
                reaction_data = {}
                if msg.reactions and msg.reactions.results:
                    for reaction in msg.reactions.results:
                        emoji = getattr(reaction.reaction, "emoticon", "üîí")
                        reaction_data[emoji] = reaction.count

                # –°—Å—ã–ª–∫–∏
                urls = [ent.url for ent in msg.entities if hasattr(ent, 'url')] if msg.entities else []

                media_type = type(msg.media).__name__ if msg.media else None

                all_messages.append({
                    "id": msg.id,
                    "date": str(msg.date),
                    "text": msg.message if msg.message else None,
                    "views": msg.views,
                    "reactions": reaction_data if reaction_data else None,
                    "replies_count": msg.replies.replies if msg.replies else None,
                    "forwards": msg.forwards,
                    "media_type": media_type,
                    "has_media": bool(msg.media),
                    "links": urls if urls else None
                })

            total_messages += len(messages)
            offset_id = messages[-1].id
            offset_date = messages[-1].date  # –û–±–Ω–æ–≤–∏–º offset_date –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

            print(f"üìä –°—É–º–º–∞—Ä–Ω–æ —Å–∫–∞—á–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")

        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_messages)}")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª: {output_file}...")
        with open(output_file, "w", encoding="utf-8") as file:
            json.dump(all_messages, file, ensure_ascii=False, indent=4)

        print("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


if __name__ == "__main__":
    print("üëã –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(fetch_posts())
